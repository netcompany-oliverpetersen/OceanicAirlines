// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using OceanicAirlines.Models;

namespace OceanicAirlines.Services
{
    public partial class DbOaDk1Context : DbContext
    {
        public DbOaDk1Context()
        {
        }

        public DbOaDk1Context(DbContextOptions<DbOaDk1Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Booking> Booking { get; set; }
        public virtual DbSet<Bookingline> Bookingline { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Parcel> Parcel { get; set; }
        public virtual DbSet<Models.Route> Route { get; set; }
        public virtual DbSet<Transporttype> Transporttype { get; set; }
        public virtual DbSet<Models.Type> Type { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=dbs-oa-dk1.database.windows.net;Initial Catalog=db-oa-dk1;User ID=admin-oa-dk1;Password=oceanicFlyAway16");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Booking>(entity =>
            {
                entity.ToTable("BOOKING", "DATA");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.EndPosId).HasColumnName("EndPosID");

                entity.Property(e => e.StartPosId).HasColumnName("StartPosID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.EndPos)
                    .WithMany(p => p.BookingEndPos)
                    .HasForeignKey(d => d.EndPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKING_ENDCITY");

                entity.HasOne(d => d.StartPos)
                    .WithMany(p => p.BookingStartPos)
                    .HasForeignKey(d => d.StartPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKING_STARTCITY");
            });

            modelBuilder.Entity<Bookingline>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.LineId, e.SegmentId })
                    .HasName("PK_DATA_BOOKINGLINE");

                entity.ToTable("BOOKINGLINE", "DATA");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.SegmentId).HasColumnName("SegmentID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('USD')");

                entity.Property(e => e.DistanceInHours).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EndPosId).HasColumnName("EndPosID");

                entity.Property(e => e.ParcelId).HasColumnName("ParcelID");

                entity.Property(e => e.Price).HasColumnType("decimal(17, 2)");

                entity.Property(e => e.StartPosId).HasColumnName("StartPosID");

                entity.Property(e => e.TransportId).HasColumnName("TransportID");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.HasOne(d => d.EndPos)
                    .WithMany(p => p.BookinglineEndPos)
                    .HasForeignKey(d => d.EndPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LINE_ENDCITY");

                entity.HasOne(d => d.StartPos)
                    .WithMany(p => p.BookinglineStartPos)
                    .HasForeignKey(d => d.StartPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LINE_STARTCITY");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("CITY", "DATA");

                entity.Property(e => e.CityName).HasMaxLength(255);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("CUSTOMER", "DATA");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Parcel>(entity =>
            {
                entity.ToTable("PARCEL", "DATA");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('USD')");

                entity.Property(e => e.HeightInCm).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.LengthInCm).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Price).HasColumnType("decimal(17, 2)");

                entity.Property(e => e.WeightInKg).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.WidthInCm).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<Models.Route>(entity =>
            {
                entity.ToTable("ROUTE", "DATA");

                entity.Property(e => e.DistanceInHours).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EndPosId).HasColumnName("EndPosID");

                entity.Property(e => e.StartPosId).HasColumnName("StartPosID");

                entity.HasOne(d => d.EndPos)
                    .WithMany(p => p.RouteEndPos)
                    .HasForeignKey(d => d.EndPosId)
                    .HasConstraintName("FK_ENDCITY");

                entity.HasOne(d => d.StartPos)
                    .WithMany(p => p.RouteStartPos)
                    .HasForeignKey(d => d.StartPosId)
                    .HasConstraintName("FK_STARTCITY");
            });

            modelBuilder.Entity<Transporttype>(entity =>
            {
                entity.ToTable("TRANSPORTTYPE", "DATA");

                entity.Property(e => e.TransportType1)
                    .HasMaxLength(100)
                    .HasColumnName("TransportType");
            });

            modelBuilder.Entity<Models.Type>(entity =>
            {
                entity.ToTable("TYPE", "DATA");

                entity.Property(e => e.Factor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Type1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Type");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("USER", "DATA");

                entity.Property(e => e.Mail)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}