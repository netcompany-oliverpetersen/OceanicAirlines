// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using OceanicAirlines.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace OceanicAirlines.Services
{
    public partial class DbOaDk1Context
    {
        private DbOaDk1ContextProcedures _procedures;

        public virtual DbOaDk1ContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DbOaDk1ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public DbOaDk1ContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetRoutePriceTableResult>().HasNoKey().ToView(null);
        }
    }

    public interface IDbOaDk1ContextProcedures
    {
        Task<List<GetRoutePriceTableResult>> GetRoutePriceTableAsync(double? Height, double? Width, double? Length, double? Weight, string Type, CancellationToken cancellationToken = default);
    }

    public partial class DbOaDk1ContextProcedures : IDbOaDk1ContextProcedures
    {
        private readonly DbOaDk1Context _context;

        public DbOaDk1ContextProcedures(DbOaDk1Context context)
        {
            _context = context;
        }

        public virtual async Task<List<GetRoutePriceTableResult>> GetRoutePriceTableAsync(double? Height, double? Width, double? Length, double? Weight, string Type, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Height",
                    Precision = 18,
                    Value = Height ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Width",
                    Precision = 18,
                    Value = Width ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Length",
                    Precision = 18,
                    Value = Length ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Weight",
                    Precision = 18,
                    Value = Weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Type",
                    Size = 255,
                    Value = Type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetRoutePriceTableResult>("EXEC @returnValue = [DATA].[GetRoutePriceTable] @Height, @Width, @Length, @Weight, @Type", sqlParameters, cancellationToken);

            //returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
